// ==============================
// üî• CLAUDIO STYLE - SERVICE WORKER
// ==============================

// Nome do cache (mude o n√∫mero da vers√£o quando alterar o app)
const CACHE_NAME = "claudio-style-v2"; // ‚¨ÖÔ∏è altere o n√∫mero sempre que fizer grandes mudan√ßas

// Arquivos essenciais para o funcionamento offline
const FILES_TO_CACHE = [
  "/",
  "/index.html",
  "/js/script.js",
  "/manifest.json",
  "/css/styles.css",
  "/img/icon-192.png",
  "/img/icon-512.png"
];

// ==============================
// üß± INSTALA√á√ÉO DO SERVICE WORKER
// ==============================
self.addEventListener("install", (event) => {
  console.log("üì¶ Instalando Service Worker...");

  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log("üìÅ Armazenando arquivos no cache...");
        return cache.addAll(FILES_TO_CACHE);
      })
      .catch((err) => console.error("‚ùå Falha ao armazenar arquivos no cache:", err))
  );

  self.skipWaiting(); // for√ßa ativa√ß√£o imediata
});

// ==============================
// üöÄ ATIVA√á√ÉO DO SERVICE WORKER
// ==============================
self.addEventListener("activate", (event) => {
  console.log("‚úÖ Service Worker ativado!");

  event.waitUntil(
    caches.keys().then((keys) =>
      Promise.all(
        keys.map((key) => {
          if (key !== CACHE_NAME) {
            console.log("üßπ Removendo cache antigo:", key);
            return caches.delete(key);
          }
        })
      )
    )
  );

  self.clients.claim(); // assume o controle imediato das p√°ginas
});

// ==============================
// üåê INTERCEPTA√á√ÉO DE REQUISI√á√ïES
// ==============================
self.addEventListener("fetch", (event) => {
  // Ignora requisi√ß√µes externas (ex: APIs, Firebase, etc.)
  if (!event.request.url.startsWith(self.location.origin)) return;

  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      const fetchPromise = fetch(event.request)
        .then((response) => {
          if (response && response.status === 200) {
            const responseToCache = response.clone();
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, responseToCache);
            });
          }
          return response;
        })
        .catch(() => cachedResponse);

      return cachedResponse || fetchPromise;
    })
  );
});

// ==============================
// ‚ö° FUN√á√ÉO PARA ATUALIZAR CACHE EM SEGUNDO PLANO
// ==============================
async function atualizarCacheEmSegundoPlano(request) {
  try {
    const response = await fetch(request);
    const cache = await caches.open(CACHE_NAME);
    await cache.put(request, response.clone());
    console.log("‚ôªÔ∏è Cache atualizado:", request.url);
  } catch (error) {
    console.warn("‚ö†Ô∏è Falha ao atualizar cache:", request.url);
  }
}